DROP TABLE IF EXISTS Users, Categories, Events, Requests, Compilations, Compilations_of_events CASCADE;

CREATE TABLE IF NOT EXISTS Users (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar(254) NOT NULL,
    email varchar(254) NOT NULL,
    CONSTRAINT UQ_USER_EMAIL UNIQUE (email),
    UNIQUE (id)
);

CREATE TABLE IF NOT EXISTS Categories (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar(50) NOT NULL,
    CONSTRAINT UQ_CATEGORY_NAME UNIQUE (name),
    UNIQUE (id)
);

CREATE TABLE IF NOT EXISTS Events (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    title varchar(150) NOT NULL,
    annotation varchar(2000) NOT NULL,
    description varchar(7000),
    cati_id BIGINT NOT NULL,
    participant_limit INTEGER,
    state varchar(50),
    paid boolean NOT NULL,
    event_date timestamp NOT NULL,
    created_on timestamp,
    published_on timestamp,
    init_id BIGINT NOT NULL,
    lat float NOT NULL,
    lon float NOT NULL,
    req_moderation boolean,
    CONSTRAINT FK_EVENTS_TO_CAT FOREIGN KEY(cati_id) REFERENCES Categories (id),
    CONSTRAINT FK_EVENTS_TO_INIT FOREIGN KEY(init_id) REFERENCES Users (id),
    UNIQUE (id)
);

CREATE TABLE IF NOT EXISTS Requests (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    requester_id BIGINT,
    event_id BIGINT,
    status varchar(50),
    created timestamp NOT NULL,
    CONSTRAINT FK_REQUESTS_TO_REQ_ID FOREIGN KEY(requester_id) REFERENCES Users (id),
    CONSTRAINT FK_REQUESTS_TO_EVENT FOREIGN KEY(event_id) REFERENCES Events (id),
    CONSTRAINT UQ_REQUESTS_REQ_ID_EVENT UNIQUE (requester_id, event_id),
    UNIQUE (id)
);

CREATE TABLE IF NOT EXISTS Compilations (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    pinned boolean ,
    title varchar(50) NOT NULL,
    UNIQUE (id)
);

CREATE TABLE IF NOT EXISTS Compilations_of_events (
    comp_id BIGINT NOT NULL,
    event_id BIGINT NOT NULL,
    CONSTRAINT PK_compilations_of_events PRIMARY KEY(comp_id, event_id),
    CONSTRAINT FK_comp_id_to_compilations FOREIGN KEY(comp_id) REFERENCES Compilations (id),
    CONSTRAINT FK_compilations_of_events_TO_events FOREIGN KEY(event_id) REFERENCES Events (id)
);